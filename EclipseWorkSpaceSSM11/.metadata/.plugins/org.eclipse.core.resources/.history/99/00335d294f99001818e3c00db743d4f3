package com.niit.core.utils.barcode;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.common.BitMatrix;
import com.google.zxing.qrcode.decoder.ErrorCorrectionLevel;

/**
 * 生成二维码控制器
 * @author andy
 * @email andy@163.com
 * @version 1.0
 */
public class BarcodeAction {
	
	private static final long serialVersionUID = -6743030235171318894L;
	/** 定义二维码图片中的内空 */
	private String url;
	/** 定义二维码图片的宽度 */
	private static final int WIDTH = 200;
	/** 定义二维码图片的高度 */
	private static final int HEIGHT = 200;
	/** 定义logo图片的宽度 */
	private static final int LOGO_WIDTH = 50;
	/** 定义logo图片的高度 */
	private static final int LOGO_HEIGHT = 50;

	public String execute(HttpServletResponse response,HttpServletRequest request) throws Exception {
		/** 二维码扫描链接地址*/
		if (url == null || "".equals(url)){
			url = "http://localhost:8090/bos/user/login";
		}

		/** 告诉浏览器响应内容类型 */
		response.setContentType("images/png");
		/** 用Map集合封装二维码全局的设置信息 */
		Map<EncodeHintType, Object> hints = new HashMap<>();
		/** 指定二维码图片中内容编码 */
		hints.put(EncodeHintType.CHARACTER_SET, "utf-8"); 
		/** 设置二维码图片上下左右的边距 */
		hints.put(EncodeHintType.MARGIN, 1);
		/** 设置纠错级别 */
		hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);
		/** 
		 * 二维码字节转换对象 
		 * 第一个参数：二维码图片中的内容
		 * 第二个参数：二维码图片格式器
		 * 第三个参数：二维码图片宽度
		 * 第四个参数：二维码图片高度
		 * 第五个参数：二维码需要的全局设置信息
		 * */
		BitMatrix matrix = new MultiFormatWriter().encode(url, 
					BarcodeFormat.QR_CODE, WIDTH, HEIGHT, hints);
		/** 获取实际宽度 */
		int matrix_width = matrix.getWidth();
		/** 获取实际高度 */
		int matrix_height = matrix.getHeight();
		/** 创建一张空白的缓冲流图片 */
		BufferedImage image = new BufferedImage(matrix_width, matrix_height, BufferedImage.TYPE_INT_RGB);
		
		/** 把二维码字节转换对象  转化成 缓冲流图片 */
		for (int x = 0; x < matrix_width; x++){
			for (int y = 0; y < matrix_height; y++){
				/** 获取一个点的颜色: true: 黑色  false: 白色 */
				int rgb = matrix.get(x, y) ? 0xDC143C : 0xffffff;
				/** 设置空白的缓冲流图片点对应的颜色 */
				image.setRGB(x, y, rgb);
			}
		}
		/** 获取中间logo对应的缓冲流图片 */
		BufferedImage logo = ImageIO.read(request.getSession().getServletContext()
						.getResourceAsStream("/images/girl1.jpg"));
		/** 获取画笔 */
		Graphics2D g = (Graphics2D)image.getGraphics();
		/** 二维码图片中间放公司的logo */
		g.drawImage(logo, (matrix_width - LOGO_WIDTH) / 2, 
						  (matrix_height - LOGO_HEIGHT) / 2,
						   LOGO_WIDTH, LOGO_HEIGHT, null);
		/** 设置画笔的粗细 */
		g.setStroke(new BasicStroke(3.0f));
		/** 设置画笔的颜色 */
		g.setColor(Color.WHITE);
		/** 设置消除锯齿 */
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		/** 绘制一个圆角矩形 */
		g.drawRoundRect((matrix_width - LOGO_WIDTH) / 2,
						(matrix_height - LOGO_HEIGHT) / 2
						, LOGO_WIDTH, LOGO_HEIGHT, 15, 15);
		/** 
		 * 向浏览器输出二维码 
		 * 第一个参数：二维码字节转换对象
		 * 第二个参数：输出的图片格式
		 * 第三个能数：输出流
		 * */
		//MatrixToImageWriter.writeToStream(matrix, "png", response.getOutputStream());
		ImageIO.write(image, "png", response.getOutputStream());
		return null;
	}

	/** setter and getter method */
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}
}